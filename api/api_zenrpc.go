// Code generated by zenrpc; DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"

	"github.com/semrush/zenrpc/v2"
	"github.com/semrush/zenrpc/v2/smd"

	"github.com/vmkteam/mfd-generator/mfd"
)

var RPC = struct {
	XMLService struct{ Tables, LoadProject, CreateProject, SaveProject, NSMapping, GenerateEntity, LoadEntity, SaveEntity string }
}{
	XMLService: struct{ Tables, LoadProject, CreateProject, SaveProject, NSMapping, GenerateEntity, LoadEntity, SaveEntity string }{
		Tables:         "tables",
		LoadProject:    "loadproject",
		CreateProject:  "createproject",
		SaveProject:    "saveproject",
		NSMapping:      "nsmapping",
		GenerateEntity: "generateentity",
		LoadEntity:     "loadentity",
		SaveEntity:     "saveentity",
	},
}

func (XMLService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Description: ``,
		Methods: map[string]smd.Service{
			"Tables": {
				Description: `Gets all tables from database
zenrps:return	list of tables`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "url",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Array,
					Items: map[string]string{
						"type": smd.String,
					},
				},
			},
			"LoadProject": {
				Description: `Loads project from file
zenrps:return		project information`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"name": {
							Description: ``,
							Type:        smd.String,
						},
						"namespaces": {
							Description: ``,
							Type:        smd.Array,
							Items: map[string]string{
								"type": smd.String,
							},
						},
						"languages": {
							Description: ``,
							Type:        smd.Array,
							Items: map[string]string{
								"type": smd.String,
							},
						},
						"goPGVer": {
							Description: ``,
							Type:        smd.Integer,
						},
						"customTypes": {
							Description: ``,
							Ref:         "#/definitions/mfd.CustomTypes",
							Type:        smd.Object,
						},
					},
					Definitions: map[string]smd.Definition{
						"mfd.CustomTypes": {
							Type:       "object",
							Properties: map[string]smd.Property{},
						},
					},
				},
			},
			"CreateProject": {
				Description: `Creates project at filepath location
zenrps:return		project information`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"name": {
							Description: ``,
							Type:        smd.String,
						},
						"namespaces": {
							Description: ``,
							Type:        smd.Array,
							Items: map[string]string{
								"type": smd.String,
							},
						},
						"languages": {
							Description: ``,
							Type:        smd.Array,
							Items: map[string]string{
								"type": smd.String,
							},
						},
						"goPGVer": {
							Description: ``,
							Type:        smd.Integer,
						},
						"customTypes": {
							Description: ``,
							Ref:         "#/definitions/mfd.CustomTypes",
							Type:        smd.Object,
						},
					},
					Definitions: map[string]smd.Definition{
						"mfd.CustomTypes": {
							Type:       "object",
							Properties: map[string]smd.Property{},
						},
					},
				},
			},
			"SaveProject": {
				Description: `Saves project at filepath location`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "project",
						Optional:    false,
						Description: ``,
						Type:        smd.Object,
						Properties: map[string]smd.Property{
							"name": {
								Description: ``,
								Type:        smd.String,
							},
							"namespaces": {
								Description: ``,
								Type:        smd.Array,
								Items: map[string]string{
									"type": smd.String,
								},
							},
							"languages": {
								Description: ``,
								Type:        smd.Array,
								Items: map[string]string{
									"type": smd.String,
								},
							},
							"goPGVer": {
								Description: ``,
								Type:        smd.Integer,
							},
							"customTypes": {
								Description: ``,
								Ref:         "#/definitions/mfd.CustomTypes",
								Type:        smd.Object,
							},
						},
						Definitions: map[string]smd.Definition{
							"mfd.CustomTypes": {
								Type:       "object",
								Properties: map[string]smd.Property{},
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Boolean,
				},
			},
			"NSMapping": {
				Description: `Saves project at filepath location
zenrps:return		table-namespace mapping`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Object,
				},
			},
			"GenerateEntity": {
				Description: `Gets xml for selected table
zenrps:return		entity information`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "url",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "table",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "namespace",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"name": {
							Description: ``,
							Type:        smd.String,
						},
						"namespace": {
							Description: ``,
							Type:        smd.String,
						},
						"table": {
							Description: ``,
							Type:        smd.String,
						},
						"attributes": {
							Description: ``,
							Ref:         "#/definitions/mfd.Attributes",
							Type:        smd.Object,
						},
						"searches": {
							Description: ``,
							Ref:         "#/definitions/mfd.Searches",
							Type:        smd.Object,
						},
					},
					Definitions: map[string]smd.Definition{
						"mfd.Attributes": {
							Type:       "object",
							Properties: map[string]smd.Property{},
						},
						"mfd.Searches": {
							Type:       "object",
							Properties: map[string]smd.Property{},
						},
					},
				},
			},
			"LoadEntity": {
				Description: `Gets xml for selected entity in project file
zenrps:return		entity information`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "namespace",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "entity",
						Optional:    false,
						Description: `the name of the entity`,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"name": {
							Description: ``,
							Type:        smd.String,
						},
						"namespace": {
							Description: ``,
							Type:        smd.String,
						},
						"table": {
							Description: ``,
							Type:        smd.String,
						},
						"attributes": {
							Description: ``,
							Ref:         "#/definitions/mfd.Attributes",
							Type:        smd.Object,
						},
						"searches": {
							Description: ``,
							Ref:         "#/definitions/mfd.Searches",
							Type:        smd.Object,
						},
					},
					Definitions: map[string]smd.Definition{
						"mfd.Attributes": {
							Type:       "object",
							Properties: map[string]smd.Property{},
						},
						"mfd.Searches": {
							Type:       "object",
							Properties: map[string]smd.Property{},
						},
					},
				},
			},
			"SaveEntity": {
				Description: `Gets xml for selected entity in project file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "entity",
						Optional:    true,
						Description: ``,
						Type:        smd.Object,
						Properties: map[string]smd.Property{
							"name": {
								Description: ``,
								Type:        smd.String,
							},
							"namespace": {
								Description: ``,
								Type:        smd.String,
							},
							"table": {
								Description: ``,
								Type:        smd.String,
							},
							"attributes": {
								Description: ``,
								Ref:         "#/definitions/mfd.Attributes",
								Type:        smd.Object,
							},
							"searches": {
								Description: ``,
								Ref:         "#/definitions/mfd.Searches",
								Type:        smd.Object,
							},
						},
						Definitions: map[string]smd.Definition{
							"mfd.Attributes": {
								Type:       "object",
								Properties: map[string]smd.Property{},
							},
							"mfd.Searches": {
								Type:       "object",
								Properties: map[string]smd.Property{},
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Boolean,
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s XMLService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.XMLService.Tables:
		var args = struct {
			Url string `json:"url"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"url"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Tables(args.Url))

	case RPC.XMLService.LoadProject:
		var args = struct {
			FilePath string `json:"filePath"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.LoadProject(args.FilePath))

	case RPC.XMLService.CreateProject:
		var args = struct {
			FilePath string `json:"filePath"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.CreateProject(args.FilePath))

	case RPC.XMLService.SaveProject:
		var args = struct {
			FilePath string      `json:"filePath"`
			Project  mfd.Project `json:"project"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "project"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.SaveProject(args.FilePath, args.Project))

	case RPC.XMLService.NSMapping:
		var args = struct {
			FilePath string `json:"filePath"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.NSMapping(args.FilePath))

	case RPC.XMLService.GenerateEntity:
		var args = struct {
			FilePath  string `json:"filePath"`
			Url       string `json:"url"`
			Table     string `json:"table"`
			Namespace string `json:"namespace"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "url", "table", "namespace"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GenerateEntity(args.FilePath, args.Url, args.Table, args.Namespace))

	case RPC.XMLService.LoadEntity:
		var args = struct {
			FilePath  string `json:"filePath"`
			Namespace string `json:"namespace"`
			Entity    string `json:"entity"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "namespace", "entity"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.LoadEntity(args.FilePath, args.Namespace, args.Entity))

	case RPC.XMLService.SaveEntity:
		var args = struct {
			FilePath string      `json:"filePath"`
			Entity   *mfd.Entity `json:"entity"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "entity"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.SaveEntity(args.FilePath, args.Entity))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
